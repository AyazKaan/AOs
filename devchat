DevChat: A simple chat interface for ao devs.
Version: 0.1
DevChat is a simple way for ao devs to keep in touch while building using aos processes. It allows you to turn send and receive messages from others via ao chatrooms.
Usage
The DevChat service is composed of three separate process types: a router, many chatrooms, and client users.
The router service provides an index of DevChat-compatible chatrooms that clients can join. Most users will only need to load the client code into their aos processes to get started.
Running the DevChat Client
In order to get started running DevChat, simply:
Clone this repository.
Open your preferred aos process.
Run .load [path to DevChat codebase]/src/client.lua
The DevChat client will then load and be started in your aos process. The help message will print, guiding you through the basic usage and functions of the client.
Starting a chatroom
Chatrooms in ao serve as message relays, forwarding messages from one user to all others. You can start a chatroom inside your aos process by:
Cloning this repository.
Starting aos with your target process.
Running .load [path to DevChat codebase]/src/chatroom.lua.
Registering your process with the router:
ao.send({ Target = "xnkv_QpWqICyt8NpVMbfsUQciZ4wlm5DigLrfXRm8fY", Action = "Register", Name = "[YOUR NAME HERE]" })

Tokenizing
If you would like to tokenize your chatroom, please load the token blueprint with .load-blueprint token. You can then manipulate the Balances variable as necessary in order to establish the appropriate starting conditions. If a chatroom has a token, users can use the Tip() function in the client to send small gifts to one another. You can also enforce that only users with the token can send messages by running RequireTokens = true.
Making your chatroom immutable
By default, all aos processes have the ability for their Owner execute code in their shell. Like all aos processes, however, the user can easily make their program immutable and trustless by setting its owner value to nil. To do so, simply execute Owner = nil. After executing this command the process will be unresponsive to any future directives by you or others.



#src/chatroom.lua

Users = Users or {}
Name = Name or "Unnamed-Chat"
Messages = Messages or {}
MaxReplay = MaxReplay or 5

if (RequireTokens == nil) and (Balances ~= nil) then
    RequireTokens = true
end

function DispatchMessage(to, from, data, type)
    ao.send({
        Target = to,
        Action = "Broadcasted",
        Broadcaster = from,
        Nickname = Users[from],
        Data = data,
        Type = type
    })
end

function Broadcast(from, data, type)
    print("Broadcasting " .. type .. " message from "
        .. from .. ". Content:\n" .. data)
    local lastUsers = {}
    -- only broadcast to the users of the last 100 messages
    for i=#Messages - 100, #Messages, 1 do
       lastUsers[Messages[i].From] = 1 
    end
    for user,_ in pairs(lastUsers) do
        DispatchMessage(user, from, data, type)
    end
    table.insert(Messages, { From = from, Type = type, Data = data })
end

Handlers.add(
    "Register",
    Handlers.utils.hasMatchingTag("Action", "Register"),
    function(m)
        print("Registering: " .. m.From .. ". Nick: " .. m.Nickname)
        Users[m.From] = m.Nickname
        ao.send({
            Target = m.From,
            Action = "Registered"
        })
    end
)

Handlers.add(
    "Unregister",
    Handlers.utils.hasMatchingTag("Action", "Unregister"),
    function(m)
        print("Unregistering: " .. m.From)
        Users[m.From] = nil
        ao.send({
            Target = m.From,
            Action = "Unregistered"
        })
    end
)

Handlers.add(
    "Broadcast",
    Handlers.utils.hasMatchingTag("Action", "Broadcast"),
    function(m)
        if RequireTokens and Balances[m.From] < 1 then
            ao.send({
                Action = "Insufficient-Balance",
                ["Your-Balance"] = tostring(Balances[m.From])
            })
            print("Rejected user " .. m.From .. " due to insufficient balance.")
        end
        Broadcast(m.From, m.Data, m.Type or "Normal")
    end
)

Handlers.add(
    "Replay",
    Handlers.utils.hasMatchingTag("Action", "Replay"),
    function(m)
        local depth = tonumber(m.Depth) or MaxReplay

        print("Replaying " .. depth .. " messages for " .. m.From .. "...")

        for i = math.max(#Messages - depth, 0) + 1, #Messages, 1 do
            print(i)
            DispatchMessage(m.From,
                Messages[i].From,
                Messages[i].Data,
                Messages[i].Type
            )
        end
    end
)

function countUsers()
    local count = 0
    for _, __ in pairs(Users) do
        count = count + 1
    end
    return count
end

Prompt =
    function()
        return Name .. "[Users:" .. countUsers() .. "]> "
    end


#src/client.lua

DevChat = {}

DevChat.Colors = {
    red = "\27[31m",
    green = "\27[32m",
    blue = "\27[34m",
    reset = "\27[0m",
    gray = "\27[90m"
}

DevChat.Router = "xnkv_QpWqICyt8NpVMbfsUQciZ4wlm5DigLrfXRm8fY"
DevChat.InitRoom = "isImEFj7zii8ALzRirQ2nqUUXecCkdFSh10xB_hbBJ0"
DevChat.LastSend = DevChat.LastSend or DevChat.InitRoom

DevChat.LastReceive = {
    Room = DevChat.InitRoom,
    Sender = nil
}

DevChat.InitRooms = { [DevChat.InitRoom] = "DevChat-Main" }
DevChat.Rooms = DevChat.Rooms or DevChat.InitRooms

DevChat.Confirmations = DevChat.Confirmations or true

-- Helper function to go from roomName => address
DevChat.findRoom =
    function(target)
        for address, name in pairs(DevChat.Rooms) do
            if target == name then
                return address
            end
        end
    end

DevChat.add =
    function(...)
        local arg = {...}
        ao.send({
            Target = DevChat.Router,
            Action = "Register",
            Name = arg[1] or Name,
            Address = arg[2] or ao.id
        })
    end

List =
    function()
        ao.send({ Target = DevChat.Router, Action = "Get-List" })
        return(DevChat.Colors.gray .. "Getting the room list from the DevChat index..." .. DevChat.Colors.reset)
    end

Join =
    function(id, ...)
        local arg = {...}
        local addr = DevChat.findRoom(id) or id
        local nick = arg[1] or ao.id
        ao.send({ Target = addr, Action = "Register", Nickname = nick })
        return(
            DevChat.Colors.gray ..
             "Registering with room " ..
            DevChat.Colors.blue .. id .. 
            DevChat.Colors.gray .. "..." .. DevChat.Colors.reset)
    end

Say =
    function(text, ...)
        local arg = {...}
        local id = arg[1]
        if id ~= nil then
            -- Remember the new room for next time.
            DevChat.LastSend = DevChat.findRoom(id) or id
        end
        local name = DevChat.Rooms[DevChat.LastSend] or id
        ao.send({ Target = DevChat.LastSend, Action = "Broadcast", Data = text })
        if DevChat.Confirmations then
            return(DevChat.Colors.gray .. "Broadcasting to " .. DevChat.Colors.blue ..
                name .. DevChat.Colors.gray .. "..." .. DevChat.Colors.reset)
        else
            return ""
        end
    end

Tip =
    function(...) -- Recipient, Target, Qty
        local arg = {...}
        local room = arg[2] or DevChat.LastReceive.Room
        local roomName = DevChat.Rooms[room] or room
        local qty = tostring(arg[3] or 1)
        local recipient = arg[1] or DevChat.LastReceive.Sender
        ao.send({
            Action = "Transfer",
            Target = room,
            Recipient = recipient,
            Quantity = qty
        })
        return(DevChat.Colors.gray .. "Sent tip of " ..
            DevChat.Colors.green .. qty .. DevChat.Colors.gray ..
            " to " .. DevChat.Colors.red .. recipient .. DevChat.Colors.gray ..
            " in room " .. DevChat.Colors.blue .. roomName .. DevChat.Colors.gray ..
            "."
        )
    end

Replay =
    function(...) -- depth, room
        local arg = {...}
        local room = nil
        if arg[2] then
            room = DevChat.findRoom(arg[2]) or arg[2]
        else
            room = DevChat.LastReceive.Room
        end
        local roomName = DevChat.Rooms[room] or room
        local depth = arg[1] or 3

        ao.send({
            Target = room,
            Action = "Replay",
            Depth = tostring(depth)
        })
        return(
            DevChat.Colors.gray ..
             "Requested replay of the last " ..
            DevChat.Colors.green .. depth .. 
            DevChat.Colors.gray .. " messages from " .. DevChat.Colors.blue ..
            roomName .. DevChat.Colors.reset .. ".")
    end

Leave =
    function(id)
        local addr = DevChat.findRoom(id) or id
        ao.send({ Target = addr, Action = "Unregister" })
        return(
            DevChat.Colors.gray ..
             "Leaving room " ..
            DevChat.Colors.blue .. id ..
            DevChat.Colors.gray .. "..." .. DevChat.Colors.reset)
    end


Handlers.add(
    "DevChat-Broadcasted",
    Handlers.utils.hasMatchingTag("Action", "Broadcasted"),
    function (m)
        local shortRoom = DevChat.Rooms[m.From] or string.sub(m.From, 1, 6)
        if m.Broadcaster == ao.id then
            if DevChat.Confirmations == true then
                print(
                    DevChat.Colors.gray .. "[Received confirmation of your broadcast in "
                    .. DevChat.Colors.blue .. shortRoom .. DevChat.Colors.gray .. ".]"
                    .. DevChat.Colors.reset)
            end
        else
            local nick = string.sub(m.Nickname, 1, 10)
            if m.Broadcaster ~= m.Nickname then
                nick = nick .. DevChat.Colors.gray .. "#" .. string.sub(m.Broadcaster, 1, 3)
            end
            print(
                "[" .. DevChat.Colors.red .. nick .. DevChat.Colors.reset
                .. "@" .. DevChat.Colors.blue .. shortRoom .. DevChat.Colors.reset
                .. "]> " .. DevChat.Colors.green .. m.Data .. DevChat.Colors.reset)

            DevChat.LastReceive.Room = m.From
            DevChat.LastReceive.Sender = m.Broadcaster
        end
    end
)

Handlers.add(
    "DevChat-List",
    function(m)
        if m.Action == "Room-List" and m.From == DevChat.Router then
            return true
        end
        return false
    end,
    function(m)
        local intro = "👋 The following rooms are currently available on DevChat:\n\n"
        local rows = ""
        DevChat.Rooms = DevChat.InitRooms

        for i = 1, #m.TagArray do
            local filterPrefix = "Room-" -- All of our room tags start with this
            local tagPrefix = string.sub(m.TagArray[i].name, 1, #filterPrefix)
            local name = string.sub(m.TagArray[i].name, #filterPrefix + 1, #m.TagArray[i].name)
            local address = m.TagArray[i].value

            if tagPrefix == filterPrefix then
                rows = rows .. DevChat.Colors.blue .. "        " .. name .. DevChat.Colors.reset .. "\n"
                DevChat.Rooms[address] = name
            end
        end

        print(
            intro .. rows .. "\nJoin a chat by running `Join(\"chatName\"[, \"yourNickname\"])`! You can leave chats with `Leave(\"name\")`.")
    end
)

if DevChatRegistered == nil then
    DevChatRegistered = true
    Join(DevChat.InitRoom)
end

return(
    DevChat.Colors.blue .. "\n\nWelcome to ao DevChat v0.1!\n\n" .. DevChat.Colors.reset ..
    "DevChat is a simple service that helps the ao community communicate as we build our new computer.\n" ..
    "The interface is simple. Run...\n\n" ..
    DevChat.Colors.green .. "\t\t`List()`" .. DevChat.Colors.reset .. " to see which rooms are available.\n" .. 
    DevChat.Colors.green .. "\t\t`Join(\"RoomName\")`" .. DevChat.Colors.reset .. " to join a room.\n" .. 
    DevChat.Colors.green .. "\t\t`Say(\"Msg\"[, \"RoomName\"])`" .. DevChat.Colors.reset .. " to post to a room (remembering your last choice for next time).\n" ..
    DevChat.Colors.green .. "\t\t`Replay([\"Count\"])`" .. DevChat.Colors.reset .. " to reprint the most recent messages from a chat.\n" ..
    DevChat.Colors.green .. "\t\t`Leave(\"RoomName\")`" .. DevChat.Colors.reset .. " at any time to unsubscribe from a chat.\n" ..
    DevChat.Colors.green .. "\t\t`Tip([\"Recipient\"])`" .. DevChat.Colors.reset .. " to send a token from the chatroom to the sender of the last message.\n\n" ..
    "You have already been registered to the " .. DevChat.Colors.blue .. DevChat.Rooms[DevChat.InitRoom] .. DevChat.Colors.reset .. ".\n" ..
    "Have fun, be respectful, and remember: Cypherpunks ship code! 🫡")


#src/router.lua

Rooms = Rooms or {}

Handlers.add(
    "Register",
    Handlers.utils.hasMatchingTag("Action", "Register"),
    function(m)
        print("Adding room '" .. m.Name .. "'. Added by: " .. m.From)
        local address = m.Address or m.From
        table.insert(Rooms, { Address = address, Name = m.Name, AddedBy = m.From })
        ao.send({
            Target = m.From,
            Action = "Registered"
        })
    end
)

Handlers.add(
    "Get-List",
    Handlers.utils.hasMatchingTag("Action", "Get-List"),
    function(m)
        print("Listing rooms for: " .. m.From)
        local reply = { Target = m.From, Action = "Room-List" }
        for i = 1, #Rooms do
            reply["Room-" .. Rooms[i].Name] = Rooms[i].Address
        end
        ao.send(reply)
    end
)

Handlers.add(
    "Unregister",
    Handlers.utils.hasMatchingTag("Action", "Unregister"),
    function(m)
        local room = nil
        for i = 1, #Rooms do
            if Rooms[i].Name == m.Name then
                room = Rooms[i]
                room.Index = i
            end
        end

        if m.From ~= room.AddedBy then
            print("UNAUTH: Remove attempt by " .. m.From .. " for '" .. m.Name .. "'!")
            return
        end

        table.remove(Rooms, room.Index)
    end
)

